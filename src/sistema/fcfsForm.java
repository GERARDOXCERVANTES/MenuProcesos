/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistema;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class fcfsForm extends javax.swing.JFrame {
    int mousex;
    int mousey;
    private int currentY = 220; // Empezamos justo debajo de los primeros campos
    
    
    
    public fcfsForm() {
        initComponents();
             setLocationRelativeTo(null); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelP = new javax.swing.JPanel();
        NomProcesoLabel = new javax.swing.JLabel();
        Calcularbutton = new javax.swing.JPanel();
        CalcularLabel = new javax.swing.JLabel();
        AgregarButton = new javax.swing.JPanel();
        agregarTxt = new javax.swing.JLabel();
        NomParametros = new javax.swing.JLabel();
        exitP = new javax.swing.JPanel();
        exitText = new javax.swing.JLabel();
        mover = new javax.swing.JPanel();
        rendimi_title = new javax.swing.JLabel();
        espera_title = new javax.swing.JLabel();
        servicio_Title = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        iconoLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        I_label = new javax.swing.JLabel();
        EsperaP_label = new javax.swing.JLabel();
        TServicio_Label = new javax.swing.JLabel();
        eliminarButton = new javax.swing.JPanel();
        eliminarLabel = new javax.swing.JLabel();
        GraficaButton = new javax.swing.JPanel();
        GraficaLabel = new javax.swing.JLabel();
        menuPrincipal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        panelP.setBackground(new java.awt.Color(255, 255, 255));
        panelP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NomProcesoLabel.setFont(new java.awt.Font("Roboto", 3, 24)); // NOI18N
        NomProcesoLabel.setText("First Come First Served ");
        panelP.add(NomProcesoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 300, -1));

        Calcularbutton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Calcularbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CalcularbuttonMouseClicked(evt);
            }
        });

        CalcularLabel.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        CalcularLabel.setText("CALCULAR ");

        javax.swing.GroupLayout CalcularbuttonLayout = new javax.swing.GroupLayout(Calcularbutton);
        Calcularbutton.setLayout(CalcularbuttonLayout);
        CalcularbuttonLayout.setHorizontalGroup(
            CalcularbuttonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalcularbuttonLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(CalcularLabel)
                .addContainerGap(9, Short.MAX_VALUE))
        );
        CalcularbuttonLayout.setVerticalGroup(
            CalcularbuttonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalcularbuttonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CalcularLabel)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        panelP.add(Calcularbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 100, 30));

        AgregarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AgregarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AgregarButtonMouseClicked(evt);
            }
        });

        agregarTxt.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        agregarTxt.setText("AGREGAR  PROCESO ");

        javax.swing.GroupLayout AgregarButtonLayout = new javax.swing.GroupLayout(AgregarButton);
        AgregarButton.setLayout(AgregarButtonLayout);
        AgregarButtonLayout.setHorizontalGroup(
            AgregarButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AgregarButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(agregarTxt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AgregarButtonLayout.setVerticalGroup(
            AgregarButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AgregarButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(agregarTxt)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        panelP.add(AgregarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 150, 30));

        NomParametros.setFont(new java.awt.Font("Roboto Black", 1, 12)); // NOI18N
        NomParametros.setText("   PROCESO                ILL              T-EXE                T-FINAL               T                  E                  I");
        panelP.add(NomParametros, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 580, 20));

        exitP.setBackground(new java.awt.Color(255, 255, 255));
        exitP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitPMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitPMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitPMouseExited(evt);
            }
        });

        exitText.setFont(new java.awt.Font("Roboto", 2, 14)); // NOI18N
        exitText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitText.setText("X");

        javax.swing.GroupLayout exitPLayout = new javax.swing.GroupLayout(exitP);
        exitP.setLayout(exitPLayout);
        exitPLayout.setHorizontalGroup(
            exitPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitText)
                .addContainerGap())
        );
        exitPLayout.setVerticalGroup(
            exitPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitPLayout.createSequentialGroup()
                .addGap(0, 3, Short.MAX_VALUE)
                .addComponent(exitText))
        );

        panelP.add(exitP, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 20));

        mover.setBackground(new java.awt.Color(255, 255, 255));
        mover.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                moverMouseDragged(evt);
            }
        });
        mover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moverMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moverMousePressed(evt);
            }
        });

        javax.swing.GroupLayout moverLayout = new javax.swing.GroupLayout(mover);
        mover.setLayout(moverLayout);
        moverLayout.setHorizontalGroup(
            moverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
        );
        moverLayout.setVerticalGroup(
            moverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        panelP.add(mover, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 860, -1));

        rendimi_title.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        rendimi_title.setText("Rendimiento promedio ");
        panelP.add(rendimi_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 160, 160, -1));

        espera_title.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        espera_title.setText("Tiempo de espera promedio");
        panelP.add(espera_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 30, 190, -1));

        servicio_Title.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        servicio_Title.setText("Tiempo de servicio promedio");
        panelP.add(servicio_Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, 190, -1));

        jSeparator2.setBackground(new java.awt.Color(102, 102, 102));
        panelP.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, 170, 10));

        jSeparator3.setBackground(new java.awt.Color(102, 102, 102));
        panelP.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 70, 170, 10));

        jSeparator4.setBackground(new java.awt.Color(102, 102, 102));
        panelP.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 140, 170, 10));

        iconoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/sistema-operativo.png"))); // NOI18N
        panelP.add(iconoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 290, 150, 150));

        jLabel4.setText("---");
        panelP.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 50, -1, -1));

        I_label.setText("---");
        panelP.add(I_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 180, 100, -1));

        EsperaP_label.setText("---");
        panelP.add(EsperaP_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 50, 100, -1));

        TServicio_Label.setText("---");
        panelP.add(TServicio_Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 120, 100, -1));

        eliminarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eliminarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminarButtonMouseClicked(evt);
            }
        });

        eliminarLabel.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        eliminarLabel.setText("ELIMINAR PROCESO");

        javax.swing.GroupLayout eliminarButtonLayout = new javax.swing.GroupLayout(eliminarButton);
        eliminarButton.setLayout(eliminarButtonLayout);
        eliminarButtonLayout.setHorizontalGroup(
            eliminarButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eliminarButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eliminarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        eliminarButtonLayout.setVerticalGroup(
            eliminarButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eliminarButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eliminarLabel)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        panelP.add(eliminarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, -1, 30));

        GraficaButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        GraficaButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GraficaButtonMouseClicked(evt);
            }
        });

        GraficaLabel.setFont(new java.awt.Font("Roboto Black", 1, 14)); // NOI18N
        GraficaLabel.setText("GRAFICA");

        javax.swing.GroupLayout GraficaButtonLayout = new javax.swing.GroupLayout(GraficaButton);
        GraficaButton.setLayout(GraficaButtonLayout);
        GraficaButtonLayout.setHorizontalGroup(
            GraficaButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GraficaButtonLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(GraficaLabel)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        GraficaButtonLayout.setVerticalGroup(
            GraficaButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GraficaButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GraficaLabel)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        panelP.add(GraficaButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, 110, 30));

        menuPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/casita.png"))); // NOI18N
        menuPrincipal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuPrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuPrincipalMouseClicked(evt);
            }
        });
        panelP.add(menuPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelP, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelP, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void moverMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moverMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - mousex, y -mousey);

    }//GEN-LAST:event_moverMouseDragged

    private void moverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moverMouseClicked

    }//GEN-LAST:event_moverMouseClicked

    private void moverMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moverMousePressed

        mousex = evt.getX();
        mousey = evt.getY();
    }//GEN-LAST:event_moverMousePressed
    private ArrayList<JTextField> processFields = new ArrayList<>();
    private ArrayList<JLabel> resultLabels = new ArrayList<>();
    int cont = 0;
    
    private void AgregarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AgregarButtonMouseClicked
         // Verificamos si ya se alcanzó el máximo de procesos
        if (cont >= 7 ) {
            JOptionPane.showMessageDialog(this, "Se ha alcanzado el número máximo de procesos", "Límite alcanzado", JOptionPane.WARNING_MESSAGE);
            return; // No se agregan más procesos
        }
        // Crear y agregar 3 nuevos JTextField con la misma estructura
            for (int i = 1; i <= 3; i++) {
                
                JTextField parametros = new JTextField();
                parametros.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                parametros.setText(""); // Texto vacío inicialmente
                
                // Posicionamos el JTextField y lo agregamos al panel
                panelP.add(parametros, new org.netbeans.lib.awtextra.AbsoluteConstraints(50 + (80 * (i - 1)), currentY, 60, -1));
                
                // Añadir a la lista de processFields
                processFields.add(parametros);
            }
                //añadimos label despues 
                for (int i = 1; i <= 4; i++) {
                JLabel newLabel = new JLabel("---");
                panelP.add(newLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300 + (80 * (i - 1)), currentY, 60, -1));
        
                // Añadir el JLabel a la lista de resultLabels
                resultLabels.add(newLabel);
            }
        
            // Incrementar la posición Y para la siguiente fila
                currentY += 40;
                cont++;
                // Refrescamos el panel para que los nuevos componentes sean visibles
                panelP.revalidate();
                panelP.repaint();
       
    }//GEN-LAST:event_AgregarButtonMouseClicked
          
           
                private void ejecutarFCFS(ArrayList<Procesos> procesos) {
                int tiempoActual = 0;
                    
                for (Procesos proceso : procesos) {
                    // El tiempo de finalización es el tiempo actual más el tiempo de ejecución del proceso
                    proceso.tiempoF = tiempoActual + proceso.tiempoEjecucion;

                    // El tiempo de servicio es el tiempo de finalización menos el tiempo de llegada
                    proceso.tiempoS = proceso.tiempoF - proceso.tiempoLlegada;

                    // El tiempo de espera es el tiempo de retorno menos el tiempo de ejecución
                    proceso.tiempoE = proceso.tiempoS - proceso.tiempoEjecucion;
                  
                    proceso.setTiempoF(tiempoActual + proceso.tiempoEjecucion);
                    proceso.setTiempoE(proceso.tiempoS - proceso.tiempoEjecucion);

                    // Actualizamos el tiempo actual
                    tiempoActual = proceso.tiempoF;
                    
                    
                    
                    //EL RENDIMIENTO 
                    proceso.rendimiento = ((float) proceso.tiempoEjecucion / proceso.tiempoS) * 100;
                   
                }
        }
    
        

            private void mostrarResultados(ArrayList<Procesos> procesos) {
             double EsperaT = 0;
             double RetornoT = 0;
             double rendimientoT = 0;
             double EsperaP = 0;
             double RetornoP = 0;
             double rendiminetoP = 0;

          
             for (Procesos proceso : procesos) {
                EsperaT += proceso.tiempoE;
                RetornoT += proceso.tiempoS;
                rendimientoT += proceso.rendimiento;
                 
             }

             EsperaP = EsperaT / procesos.size();
             RetornoP = RetornoT / procesos.size();
             rendiminetoP = rendimientoT / procesos.size();

             EsperaP_label.setText(String.format("%.2f",EsperaP));
             TServicio_Label.setText(String.format("%.2f", RetornoP));
             I_label.setText(String.format("%.2f", rendiminetoP));
             
             
             
              int index = 0; // Índice para acceder a las etiquetas

        for (Procesos proceso : procesos) {
            // Actualiza los JLabel de acuerdo a los cálculos del proceso actual
            resultLabels.get(index).setText(String.valueOf(proceso.tiempoF)); // T-FINAL
            resultLabels.get(index + 1).setText(String.valueOf(proceso.tiempoS));  // T-RETORNO
            resultLabels.get(index + 2).setText(String.valueOf(proceso.tiempoE));   // T-ESPERA
            resultLabels.get(index + 3).setText(String.format("%.2f",proceso.rendimiento));

            // Incrementamos el índice en 4 para los siguientes resultados
            index += 4;
        }
         }


    
    
    
    
    private void exitPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitPMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitPMouseClicked

    private void exitPMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitPMouseEntered
        exitP.setBackground(Color.red);
    }//GEN-LAST:event_exitPMouseEntered

    private void exitPMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitPMouseExited
        exitP.setBackground(Color.white);
    }//GEN-LAST:event_exitPMouseExited

    
    private void CalcularbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CalcularbuttonMouseClicked
        ArrayList<Procesos> procesos = new ArrayList<>();
        try {
    // Recorrer los JTextField de la lista processFields y obtener sus valores
    for (int i = 0; i < processFields.size(); i += 3) {
        String nombre = processFields.get(i).getText(); // Nombre del proceso
        int tiempoLlegada = Integer.parseInt(processFields.get(i + 1).getText()); // Tiempo de llegada
        int tiempoEjecucion = Integer.parseInt(processFields.get(i + 2).getText()); // Tiempo de ejecución
        if (nombre.trim().isEmpty()) {
            throw new Exception("El nombre del proceso no puede estar vacío.");
        }
        // Añadir un nuevo proceso con los datos obtenidos
        procesos.add(new Procesos(nombre, tiempoLlegada, tiempoEjecucion));
    }
    // Ejecutar el algoritmo FCFS
    ejecutarFCFS(procesos);
    
    // Mostrar los resultados en la interfaz
    mostrarResultados(procesos);
        }  catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Asegúrate de ingresar números válidos en los campos de tiempo.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CalcularbuttonMouseClicked

    private void eliminarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminarButtonMouseClicked
       try {
        // Verificar que haya al menos un proceso
        if (processFields.size() < 3 || resultLabels.size() < 4) {
            JOptionPane.showMessageDialog(this, "No hay procesos para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Eliminar los últimos 3 JTextField correspondientes al último proceso
        JTextField nombreField = processFields.get(processFields.size() - 3); // Último campo de nombre
        JTextField tiempoLlegadaField = processFields.get(processFields.size() - 2); // Último campo de tiempo de llegada
        JTextField tiempoEjecucionField = processFields.get(processFields.size() - 1); // Último campo de tiempo de ejecución

        // Remover los JTextField del panel
        panelP.remove(nombreField);
        panelP.remove(tiempoLlegadaField);
        panelP.remove(tiempoEjecucionField);

        // Eliminar los JTextField de la lista processFields
        processFields.remove(processFields.size() - 1); // Remover tiempo de ejecución
        processFields.remove(processFields.size() - 1); // Remover tiempo de llegada
        processFields.remove(processFields.size() - 1); // Remover nombre

        // Eliminar los últimos 4 JLabel correspondientes al último proceso
        for (int j = 0; j < 4; j++) {
            JLabel labelToRemove = resultLabels.get(resultLabels.size() - 1); // Último JLabel
            panelP.remove(labelToRemove);
            resultLabels.remove(resultLabels.size() - 1); // Remover JLabel de la lista
        }

        // Decrementar el contador 'cont' para reflejar que un proceso ha sido eliminado
        cont--;

        // Ajustar la posición Y para reflejar el espacio disponible para futuros procesos
        currentY -= 40;

        // Refrescar el panel para reflejar los cambios
        panelP.revalidate();
        panelP.repaint();

        JOptionPane.showMessageDialog(this, "Último proceso eliminado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al intentar eliminar el último proceso: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_eliminarButtonMouseClicked

    private void GraficaButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GraficaButtonMouseClicked
        ArrayList<Procesos> procesos = new ArrayList<>();
    try {
        // Recorrer los JTextField para obtener los valores
        for (int i = 0; i < processFields.size(); i += 3) {
            String nombre = processFields.get(i).getText(); // Nombre del proceso
            int tiempoLlegada = Integer.parseInt(processFields.get(i + 1).getText()); // Tiempo de llegada
            int tiempoEjecucion = Integer.parseInt(processFields.get(i + 2).getText()); // Tiempo de ejecución
            
            if (nombre.trim().isEmpty()) {
                throw new Exception("El nombre del proceso no puede estar vacío.");
            }

            // Crear un nuevo proceso temporal
            Procesos proceso = new Procesos(nombre, tiempoLlegada, tiempoEjecucion);
            procesos.add(proceso); // Agregar a la lista antes de calcular tiempos
        }

        // Calcular los tiempos con el algoritmo FCFS
        ejecutarFCFS(procesos);

        // Actualizar los JLabel después de haber calculado los tiempos
        int index = 0; // Índice para acceder a las etiquetas
        for (Procesos proceso : procesos) {
            // Usar los métodos set para guardar los tiempos en el objeto
            proceso.setTiempoF(proceso.tiempoF); // Asignar tiempo final
            proceso.setTiempoE(proceso.tiempoE); // Asignar tiempo de espera
            proceso.setTiempoS(proceso.tiempoS); // asignamos el tiempo servicio
            
            // Actualiza el JLabel de acuerdo al cálculo del proceso actual
            resultLabels.get(index).setText(String.valueOf(proceso.getTiempoF())); // T-FINAL
            resultLabels.get(index + 1).setText(String.valueOf(proceso.getTiempoS()));//T servicio s
            resultLabels.get(index + 2).setText(String.valueOf(proceso.getTiempoE())); // T-ESPERA
            // Incrementamos el índice en 4 para los siguientes resultados
            index += 4;
        }

        // Mostrar la ventana de parámetros de la gráfica
        parametrosFCFS f = new parametrosFCFS(procesos);
        f.setVisible(true);

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Asegúrate de ingresar números válidos en los campos de tiempo.", "Error de formato", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_GraficaButtonMouseClicked

    private void menuPrincipalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuPrincipalMouseClicked
        MenuP ventana = new MenuP();
        ventana.setVisible(true);
        dispose();

    }//GEN-LAST:event_menuPrincipalMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fcfsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fcfsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fcfsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fcfsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fcfsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AgregarButton;
    private javax.swing.JLabel CalcularLabel;
    private javax.swing.JPanel Calcularbutton;
    private javax.swing.JLabel EsperaP_label;
    private javax.swing.JPanel GraficaButton;
    private javax.swing.JLabel GraficaLabel;
    private javax.swing.JLabel I_label;
    private javax.swing.JLabel NomParametros;
    private javax.swing.JLabel NomProcesoLabel;
    private javax.swing.JLabel TServicio_Label;
    private javax.swing.JLabel agregarTxt;
    private javax.swing.JPanel eliminarButton;
    private javax.swing.JLabel eliminarLabel;
    private javax.swing.JLabel espera_title;
    private javax.swing.JPanel exitP;
    private javax.swing.JLabel exitText;
    private javax.swing.JLabel iconoLabel;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel menuPrincipal;
    private javax.swing.JPanel mover;
    private javax.swing.JPanel panelP;
    private javax.swing.JLabel rendimi_title;
    private javax.swing.JLabel servicio_Title;
    // End of variables declaration//GEN-END:variables
}
